export type EffectType = 'waveform' | 'particles' | 'spectrum' | 'lyrics' | 'camera';
export type FontType = 'teko' | 'prompt' | 'audiowide' | 'russo' | 'orbitron';
export type AnimationType = 'glow' | 'pulse' | 'bounce' | 'fade' | 'none';
export type MIDIControllerMapping = {
    id: string;
    name: string;
    type: 'note' | 'cc' | 'pitch_bend';
    midiChannel: number;
    midiNumber: number;
    targetParameter: string;
    minValue: number;
    maxValue: number;
    curve: 'linear' | 'exponential' | 'logarithmic';
    enabled: boolean;
};
export type PresetType = {
    id: string;
    name: string;
    effectType: EffectType;
    colorTheme: string;
    sensitivity: number;
    layers: LayerType[];
    midiChannel?: number;
    midiMappings?: MIDIControllerMapping[];
};
export type LayerType = {
    id: string;
    type: EffectType;
    active: boolean;
    opacity: number;
    colorTheme: string;
    sensitivity: number;
    zIndex: number;
};
export type LyricsLineType = {
    id: string;
    text: string;
    timestamp: number;
    duration?: number;
    confidence?: number;
};
interface VisualizerState {
    currentEffectType: EffectType;
    colorTheme: string;
    sensitivity: number;
    isAudioAnalyzing: boolean;
    isMicrophoneEnabled: boolean;
    isPlaying: boolean;
    audioSource: AudioNode | null;
    audioContext: AudioContext | null;
    layers: LayerType[];
    activeLayerId: string | null;
    presets: PresetType[];
    currentPresetId: string | null;
    isCameraEnabled: boolean;
    isFullscreen: boolean;
    isMIDIEnabled: boolean;
    midiMappings: MIDIControllerMapping[];
    activeMIDIDeviceId: string | null;
    lastMIDIMessage: {
        type: number;
        channel: number;
        data1: number;
        data2: number;
        timestamp: number;
    } | null;
    isLyricsEnabled: boolean;
    currentLyrics: string;
    nextLyrics: string;
    lyricsHistory: LyricsLineType[];
    lyricsConfidence: number;
    lyricsFont: FontType;
    lyricsAnimation: AnimationType;
    lyricsColor: string;
    setEffectType: (type: EffectType) => void;
    setColorTheme: (color: string) => void;
    setSensitivity: (value: number) => void;
    setAudioAnalyzing: (isAnalyzing: boolean) => void;
    setMicrophoneEnabled: (enabled: boolean) => void;
    setIsPlaying: (playing: boolean) => void;
    setAudioSource: (source: AudioNode | null) => void;
    setAudioContext: (context: AudioContext | null) => void;
    addLayer: (layer: Omit<LayerType, 'id' | 'zIndex'>) => void;
    removeLayer: (id: string) => void;
    updateLayer: (id: string, updates: Partial<Omit<LayerType, 'id'>>) => void;
    setActiveLayer: (id: string | null) => void;
    reorderLayers: (orderedIds: string[]) => void;
    savePreset: (name: string) => void;
    loadPreset: (id: string) => void;
    deletePreset: (id: string) => void;
    setLyricsEnabled: (enabled: boolean) => void;
    updateCurrentLyrics: (text: string, confidence?: number) => void;
    updateNextLyrics: (text: string) => void;
    setLyricsFont: (font: FontType) => void;
    setLyricsAnimation: (animation: AnimationType) => void;
    setLyricsColor: (color: string) => void;
    clearLyricsHistory: () => void;
    toggleCamera: () => void;
    toggleFullscreen: () => void;
    setMIDIEnabled: (enabled: boolean) => void;
    setActiveMIDIDevice: (deviceId: string | null) => void;
    processMIDIMessage: (message: {
        type: number;
        channel: number;
        data1: number;
        data2: number;
        timestamp: number;
    }) => void;
    addMIDIMapping: (mapping: Omit<MIDIControllerMapping, 'id'>) => void;
    removeMIDIMapping: (id: string) => void;
    updateMIDIMapping: (id: string, updates: Partial<Omit<MIDIControllerMapping, 'id'>>) => void;
    toggleMIDIMapping: (id: string) => void;
}
export declare const useVisualizerStore: import("zustand").UseBoundStore<import("zustand").StoreApi<VisualizerState>>;
export {};
